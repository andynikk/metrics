Задание для трека «Сервис сбора метрик и алертинга»
Разработайте агент по сбору рантайм-метрик и их последующей отправке на сервер по протоколу HTTP.
Разработку нужно вести с использованием шаблона.
Агент должен собирать метрики двух типов:
gauge, тип float64
counter, тип int64
В качестве источника метрик используйте пакет runtime.
Нужно собирать следующие метрики:
Имя метрики: "Alloc", тип: gauge
Имя метрики: "BuckHashSys", тип: gauge
Имя метрики: "Frees", тип: gauge
Имя метрики: "GCCPUFraction", тип: gauge
Имя метрики: "GCSys", тип: gauge
Имя метрики: "HeapAlloc", тип: gauge
Имя метрики: "HeapIdle", тип: gauge
Имя метрики: "HeapInuse", тип: gauge
Имя метрики: "HeapObjects", тип: gauge
Имя метрики: "HeapReleased", тип: gauge
Имя метрики: "HeapSys", тип: gauge
Имя метрики: "LastGC", тип: gauge
Имя метрики: "Lookups", тип: gauge
Имя метрики: "MCacheInuse", тип: gauge
Имя метрики: "MCacheSys", тип: gauge
Имя метрики: "MSpanInuse", тип: gauge
Имя метрики: "MSpanSys", тип: gauge
Имя метрики: "Mallocs", тип: gauge
Имя метрики: "NextGC", тип: gauge
Имя метрики: "NumForcedGC", тип: gauge
Имя метрики: "NumGC", тип: gauge
Имя метрики: "OtherSys", тип: gauge
Имя метрики: "PauseTotalNs", тип: gauge
Имя метрики: "StackInuse", тип: gauge
Имя метрики: "StackSys", тип: gauge
Имя метрики: "Sys", тип: gauge
Имя метрики: "TotalAlloc", тип: gauge
К метрикам пакета runtime добавьте другие:
Имя метрики: "PollCount", тип: counter — счётчик, увеличивающийся на 1 при каждом обновлении метрики из пакета runtime (на каждый pollInterval — см. ниже).
Имя метрики: "RandomValue", тип: gauge — обновляемое рандомное значение.
По умолчанию приложение должно обновлять метрики из пакета runtime с заданной частотой: pollInterval — 2 секунды.
По умолчанию приложение должно отправлять метрики на сервер с заданной частотой: reportInterval — 10 секунд.
Метрики нужно отправлять по протоколу HTTP, методом POST:
по умолчанию на адрес: 127.0.0.1, порт: 8080;
в формате: http://<АДРЕС_СЕРВЕРА>/update/<ТИП_МЕТРИКИ>/<ИМЯ_МЕТРИКИ>/<ЗНАЧЕНИЕ_МЕТРИКИ>;
Content-Type: text/plain.

Задание для трека «Сервис сбора метрик и алертинга»
Разработайте сервер по сбору рантайм-метрик, который собирает репорты от агентов по протоколу HTTP.
Разработку следует продолжать в используемом репозитории (с предыдущими инкрементами), но сервер стоит размещать по своему пути: cmd/server/.
Сервер должен собирать и хранить произвольные метрики двух типов:
gauge, тип float64, новое значение должно замещать предыдущее;
counter, тип int64, новое значение должно добавляться к предыдущему (если оно ранее уже было известно серверу).
Метрики должны приниматься сервером по протоколу HTTP, методом POST:
по умолчанию открывать порт 8080 на адресе 127.0.0.1;
в формате http://<АДРЕС_СЕРВЕРА>/update/<ТИП_МЕТРИКИ>/<ИМЯ_МЕТРИКИ>/<ЗНАЧЕНИЕ_МЕТРИКИ>;
Content-Type: text/plain;
при успешном приёме возвращать статус: http.StatusOK.
Покройте код агента и сервера юнит-тестами.


//////////////////////////////////////////////////////
Задание для трека «Сервис сбора метрик и алертинга»
Разработайте сервер по сбору рантайм-метрик, который собирает репорты от агентов по протоколу HTTP.
Разработку следует продолжать в используемом репозитории (с предыдущими инкрементами), но сервер стоит размещать по своему пути: cmd/server/.
Сервер должен собирать и хранить произвольные метрики двух типов:
gauge, тип float64, новое значение должно замещать предыдущее;
counter, тип int64, новое значение должно добавляться к предыдущему (если оно ранее уже было известно серверу).
Метрики должны приниматься сервером по протоколу HTTP, методом POST:
по умолчанию открывать порт 8080 на адресе 127.0.0.1;
в формате http://<АДРЕС_СЕРВЕРА>/update/<ТИП_МЕТРИКИ>/<ИМЯ_МЕТРИКИ>/<ЗНАЧЕНИЕ_МЕТРИКИ>;
Content-Type: text/plain;
при успешном приёме возвращать статус: http.StatusOK.
Покройте код агента и сервера юнит-тестами.
Для обоих треков
Перед выполнением этого инкремента убедитесь, что структура сервиса представляет собой набор пакетов и структур, разделённых на слои: например handlers, storage и server.
Обратите внимание, что слой storage должен имплементировать интерфейс хранения, например repositories. Это понадобится вам для подмены хранилища моком в тестах и использования DI. Названия пакетов, структур, интерфейсов и методов можно задать любые, исходя из опыта или личных предпочтений.

/////////////////////////////////////////////////////////////
Задание для трека «Сервис сбора метрик и алертинга»
Перепишите код с использованием одного из распространённых фреймворков, например chi.
Сервер должен возвращать текущее значение запрашиваемой метрики в текстовом виде по запросу GET http://<АДРЕС_СЕРВЕРА>/value/<ТИП_МЕТРИКИ>/<ИМЯ_МЕТРИКИ> (со статусом http.StatusOK).
При попытке запроса неизвестной серверу метрики сервер должен возвращать http.StatusNotFound.
По запросу GET http://<АДРЕС_СЕРВЕРА>/ сервер должен отдавать HTML-страничку со списком имён и значений всех известных ему на текущий момент метрик.

//